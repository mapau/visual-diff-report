import { generate, VisualDiffReportConfig } from "./generate.js";
import { parse } from "ts-command-line-args";
import { isAbsolute, resolve } from "path";
import chalk from "chalk";

interface IVisualDiffReportArguments {
  config?: string;
  rootDir?: string;
  outDir?: string;
  help?: boolean;
  verbose?: boolean;
}

// args typed as ICopyFilesArguments
const optional = true;
export const args = parse<IVisualDiffReportArguments>(
  {
    config: {
      alias: "c",
      type: String,
      optional,
      description: "Path to config file.",
    },
    rootDir: {
      alias: "r",
      type: String,
      optional,
      description:
        "Path to root directory with visual diff images. Only usefull if all other default paramters work for you (i.e. if you have a folder structure as generated by https://github.com/modernweb-dev/web/tree/master/packages/test-runner-visual-regression)!",
    },
    verbose: {
      alias: "v",
      type: Boolean,
      optional,
      description: "Enable verbose logging",
    },
    outDir: {
      alias: "o",
      type: String,
      optional,
      description: "Path to output directory.",
    },
    help: {
      type: Boolean,
      optional,
      alias: "h",
      description: "Prints this usage guide",
    },
  },
  {
    showHelpWhenArgsMissing: true,
    helpArg: "help",
  }
);

// if (!args.configFile && !args.rootDir) {
//   console.log("you need to specify either --rootDir or --configFile");
//   console.log("use --help option for additional help");
//   process.exit(1);
// }

function run(config: Partial<VisualDiffReportConfig> = {}) {
  generate(config);
}

if (args.config) {
  const path = isAbsolute(args.config)
    ? args.config
    : resolve(process.cwd(), args.config);
  import(path).then(
    ({ default: config }: { default: Partial<VisualDiffReportConfig> }) => {
      delete args.config;
      const mergedConfig = {
        ...config,
        ...args,
      };
      if (mergedConfig.verbose) {
        console.log(chalk.blue("loaded config"), path, mergedConfig);
      }
      run(mergedConfig);
    }
  );
} else {
  run(args);
}
